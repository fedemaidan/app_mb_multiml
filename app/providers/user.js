"use strict";
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var api_1 = require("./api");
var database_1 = require("./database");
var nativescript_socketio_1 = require("nativescript-socketio");
require("rxjs/add/operator/map");
require("rxjs/add/operator/toPromise");
require("rxjs/Rx");
var helper = require("../service-helper");
var utils = require("utils/utils");
var User = (function () {
    function User(http, api, database) {
        this.http = http;
        this.api = api;
        this.database = database;
        this.url = 'https://abed77da.ngrok.io/api';
        this.urlSocket = 'https://fab8b305.ngrok.io';
        this.socket = new nativescript_socketio_1.SocketIO(this.urlSocket, 3000);
        this.socket.connect();
        this.cargarUsuario();
    }
    User.prototype.dameNickname = function (id) {
        var aux = "a";
        this.cuentas.forEach(function (cuenta) {
            if (cuenta.id_ml == id)
                aux = cuenta.nickname;
        });
        return aux;
    };
    User.prototype.cargarUsuario = function () {
        var _this = this;
        var self = this;
        this.database.dameUsuario().then(function (row) {
            if (row) {
                self._user = row[0];
                _this.token = row[1];
                helper.setupNotifications(utils.ad.getApplicationContext(), self._user, self.socket);
                self.actualizarCuentas({});
            }
        });
    };
    User.prototype.getApi = function () {
        return this.url;
    };
    User.prototype.login = function (accountInfo) {
        var _this = this;
        accountInfo = this.cargarHeadersAutorizations(accountInfo);
        var seq = this.api.post(this.url, 'authenticate', accountInfo).share();
        seq
            .map(function (res) { return res.json(); })
            .subscribe(function (res) {
            if (res.success == true) {
                var self = _this;
                _this.database.insertarUsuario(accountInfo.name, res.token).then(function () {
                    self.cargarUsuario();
                });
            }
            else {
                console.log("fall√≥");
            }
        });
        return seq;
    };
    User.prototype.signup = function (accountInfo) {
        var _this = this;
        accountInfo = this.cargarHeadersAutorizations(accountInfo);
        var seq = this.api.post(this.url, 'signup', accountInfo).share();
        seq
            .map(function (res) { return res.json(); })
            .subscribe(function (res) {
            // If the API returned a successful response, mark the user as logged in
            if (res.status == 'success') {
                _this.login(accountInfo);
            }
        }, function (err) {
            console.error('ERROR', err);
        });
        return seq;
    };
    User.prototype.actualizarCuentas = function (accountInfo) {
        var _this = this;
        accountInfo = this.cargarHeadersAutorizations(accountInfo);
        var seq = this.api.get(this.url, 'cuentas', {}, accountInfo).share();
        seq
            .map(function (res) { return res.json(); })
            .subscribe(function (res) {
            if (res.success == true) {
                _this.cuentas = res.data;
                _this.socket.on('actualizarCuentas', function (resource) {
                    _this.actualizarCuentas(resource);
                });
            }
            else {
                console.error('ERROR ACTUALIZANDO CUENTAS', res);
                return res.msg;
            }
        }, function (err) {
            console.error('ERROR', err);
            return err.msg;
        });
        return seq;
    };
    User.prototype.dameToken = function (ml_id) {
        if (this.cuentas != null) {
            this.cuentas.forEach(function (cuenta) {
                if (cuenta.id_ml == ml_id) {
                    return cuenta.token.valueOf();
                }
            });
        }
        return null;
    };
    User.prototype.logout = function () {
        var _this = this;
        this.database.borrarUsuarios().then(function () {
            _this._user = null;
            _this.token = null;
        });
    };
    User.prototype.cargarHeadersAutorizations = function (options) {
        if (!options) {
            options = new http_1.RequestOptions();
        }
        if (this.token) {
            var headers = new http_1.Headers();
            headers.append('Authorization', this.token);
            options.headers = headers;
        }
        return options;
    };
    return User;
}());
User = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http,
        api_1.Api,
        database_1.Database])
], User);
exports.User = User;
//# sourceMappingURL=data:application/json;base64,